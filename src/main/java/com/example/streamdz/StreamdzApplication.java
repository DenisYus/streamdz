package com.example.streamdz;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.stream.Collectors;


public class StreamdzApplication {

    public static void main(String[] args) {
        SpringApplication.run(StreamdzApplication.class, args);
        StreamAPIPractice streamAPIPractice = new StreamAPIPractice();
        List<StreamAPIPractice.User> userList = streamAPIPractice.getUsers();

        // –°–æ–∑–¥–∞—Ç—å –º–∞–ø –≥–¥–µ –∫–ª—é—á - id, –∑–Ω–∞—á–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        Map<Long, StreamAPIPractice.User> userMap = userList.stream()
                .collect(Collectors.toMap(StreamAPIPractice.User::getId, Function.identity()));
        userMap.forEach((id, user) -> System.out.println("ID: " + id + ", User: " + user));



        // –†–∞–∑–±–∏—Ç—å –ø–æ –ø–æ–ª—É –≤ —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∞ –ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É)
        List<StreamAPIPractice.User> maleUsers = userList.stream()
                .filter(user -> user.getGender() == StreamAPIPractice.Sex.MALE)
                .toList();
        List<StreamAPIPractice.User> femaleUsers = userList.stream()
                .filter(user -> user.getGender() == StreamAPIPractice.Sex.FEMALE)
                .toList();
        List<StreamAPIPractice.User> unknownUsers = userList.stream()
                .filter(user -> user.getGender() == StreamAPIPractice.Sex.UNKNOWN)
                .toList();

        Map<StreamAPIPractice.Sex, List<StreamAPIPractice.User>> userMap2 =  userList.stream()
                .collect(Collectors.groupingBy(StreamAPIPractice.User::getGender));
        List<StreamAPIPractice.User> maleUsers2 = userMap2.getOrDefault(StreamAPIPractice.Sex.MALE, List.of());

        // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ñ–∞–º–∏–ª–∏—è–º–∏ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò
        List<String> adminList = userList.stream().filter(user -> user.getRoles().contains("Admin"))
                .map(user -> user.getName().toUpperCase() + " " + user.getLastname().toUpperCase())
                .collect(Collectors.toList());
        System.out.println(adminList);

        // –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç reduce —Ç–µ–±–µ –≤ –ø–æ–º–æ—â—å üôÇ

        BiFunction<Integer, StreamAPIPractice.User, Integer> biFunc = (a, b) -> a + b.getAge();
        BinaryOperator<Integer> biOp = Integer::sum;
        Integer average = userList.stream().reduce(0, biFunc, biOp) / userList.size();
        System.out.println(average);

        // –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ toString()
        List<String> userString = userList.stream()
                .map(StreamAPIPractice.User::toString)
                .collect(Collectors.toList());
        System.out.println(userString);


    }

}
